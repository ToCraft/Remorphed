import java.text.SimpleDateFormat

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.4-SNAPSHOT" apply false
    id "me.shedaniel.unified-publishing" version "0.1.+" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "maven-publish"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.parchmentmc_mappings}@zip")
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.      
        maven { url "https://maven.parchmentmc.org" }
        maven {
            name = "tocraftMavenPublic"
            url "https://maven.tocraft.dev/public"
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    ext {
        releaseChangelog = {
            def dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm")
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))
            def branch
            if (System.env.BRANCH_NAME) {
                branch = System.env.BRANCH_NAME
                branch = branch.substring(branch.lastIndexOf("/") + 1)
            } else {
                branch = "git rev-parse --abbrev-ref HEAD".execute().in.text.trim()
            }
            if (branch == "HEAD") {
                branch = "git rev-parse --short HEAD".execute().in.text.trim()
            }
            def time = dateFormat.format(new Date())
            def changes = new StringBuilder()
            changes << "## CraftedCore v$project.version for $project.minecraft_version\nUpdated at **$time**.\n[Click here for changelog](https://www.github.com/ToCraft/craftedcore/commits/$branch)"
            def proc = "git log --max-count=200 --pretty=format:%s".execute()
            proc.in.eachLine { line ->
                def processedLine = line.toString()
                if (!processedLine.contains("New translations") && !processedLine.contains("Merge") && !processedLine.contains("branch")) {
                    changes << "\n- ${processedLine.capitalize()}"
                }
            }
            proc.waitFor()
            return changes.toString()
        }
    }

    java {
        withSourcesJar()
    }
}
